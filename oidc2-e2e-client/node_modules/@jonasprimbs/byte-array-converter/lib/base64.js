(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./hex"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.base64ToHex = exports.hexToBase64 = exports.decodeBase64 = exports.encodeBase64 = void 0;
    var hex_1 = require("./hex");
    /**
     * Encodes a Uint8Array to Base64 encoded string.
     * @param byteArray Uint8Array to encode.
     * @returns Base64 encoded Uint8Array string.
     */
    function encodeBase64(byteArray) {
        if (typeof window !== 'undefined') {
            return window.btoa(String.fromCharCode.apply(String, Array.from(byteArray)));
        }
        else {
            return Buffer.from(byteArray).toString('base64');
        }
    }
    exports.encodeBase64 = encodeBase64;
    /**
     * Decodes a base64 encoded Uint8Array string to Uint8Array.
     * @param base64 Base64 encoded Uint8Array string to decode.
     * @returns Decoded Uint8Array.
     */
    function decodeBase64(base64) {
        if (typeof window !== 'undefined') {
            var str = window.atob(base64);
            return new Uint8Array(str.split('').map(function (b) { return b.charCodeAt(0); }));
        }
        else {
            return Buffer.from(base64, 'base64');
        }
    }
    exports.decodeBase64 = decodeBase64;
    /**
     * Converts a HEX encoded Uint8Array string to a Base64 encoded Uint8Array string.
     * @param hex HEX encoded Uint8Array string to convert.
     * @param separator Separator between HEX encoded bytes.
     * @returns Base64 encoded Uint8Array string.
     */
    function hexToBase64(hex, separator) {
        if (separator === void 0) { separator = ':'; }
        var byteArray = (0, hex_1.decodeHex)(hex, separator);
        return encodeBase64(byteArray);
    }
    exports.hexToBase64 = hexToBase64;
    /**
     * Converts a Base64 encoded Uint8Array string to a HEX encoded Uint8Array string.
     * @param base64 Base64 encoded Uint8Array string to convert.
     * @param separator Separator between HEX encoded bytes.
     * @returns HEX encoded Uint8Array string.
     */
    function base64ToHex(base64, separator) {
        if (separator === void 0) { separator = ':'; }
        var byteArray = decodeBase64(base64);
        return (0, hex_1.encodeHex)(byteArray, separator);
    }
    exports.base64ToHex = base64ToHex;
});
