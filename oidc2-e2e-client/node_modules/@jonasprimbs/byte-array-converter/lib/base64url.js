(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./base64"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.base64urlToHex = exports.hexToBase64url = exports.base64urlToBase64 = exports.base64ToBase64url = exports.decodeBase64url = exports.encodeBase64url = void 0;
    var base64_1 = require("./base64");
    /**
     * Encodes a Uint8Array to Base64url encoded Uint8Array string.
     * @param byteArray Uint8Array to encode.
     * @returns Base64url encoded Uint8Array string.
     */
    function encodeBase64url(byteArray) {
        var base64 = (0, base64_1.encodeBase64)(byteArray);
        return base64ToBase64url(base64);
    }
    exports.encodeBase64url = encodeBase64url;
    /**
     * Encodes a Uint8Array to Base64url encoded Uint8Array string.
     * @param base64url Base64url encoded Uint8Array string to decode.
     * @returns Decoded Uint8Array.
     */
    function decodeBase64url(base64url) {
        var base64 = base64urlToBase64(base64url);
        return (0, base64_1.decodeBase64)(base64);
    }
    exports.decodeBase64url = decodeBase64url;
    /**
     * Converts a Base64 encoded Uint8Array string to a Base64url encoded Uint8Array string.
     * @param base64 Base64 encoded Uint8Array string to convert.
     * @returns Base64url encoded Uint8Array string.
     */
    function base64ToBase64url(base64) {
        return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }
    exports.base64ToBase64url = base64ToBase64url;
    /**
     * Converts a Base64url encoded Uint8Array string to a Base64 encoded Uint8Array string.
     * @param base64url Base64url encoded Uint8Array string to convert.
     * @returns Base64 encoded Uint8Array string.
     */
    function base64urlToBase64(base64url) {
        return base64url.replace(/-/g, '+').replace(/_/g, '/');
    }
    exports.base64urlToBase64 = base64urlToBase64;
    /**
     * Converts a HEX encoded Uint8Array string to a Base64url encoded Uint8Array string.
     * @param hex HEX encoded Uint8Array string to convert.
     * @param separator Separator between HEX encoded bytes.
     * @returns Base64url encoded Uint8Array string.
     */
    function hexToBase64url(hex, separator) {
        if (separator === void 0) { separator = ':'; }
        var base64 = (0, base64_1.hexToBase64)(hex, separator);
        return base64ToBase64url(base64);
    }
    exports.hexToBase64url = hexToBase64url;
    /**
     * Converts a Base64url encoded Uint8Array string to a HEX encoded Uint8Array string.
     * @param base64url Base64url encoded Uint8Array string to convert.
     * @param separator Separator between HEX encoded bytes.
     * @returns HEX encoded Uint8Array string.
     */
    function base64urlToHex(base64url, separator) {
        if (separator === void 0) { separator = ':'; }
        var base64 = base64urlToBase64(base64url);
        return (0, base64_1.base64ToHex)(base64, separator);
    }
    exports.base64urlToHex = base64urlToHex;
});
