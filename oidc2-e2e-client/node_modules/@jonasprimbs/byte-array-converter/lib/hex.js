(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHex = exports.encodeHex = void 0;
    /**
     * Encodes a Uint8Array to HEX encoded Uint8Array string.
     * @param byteArray Uint8Array to encode.
     * @param separator Separator between encoded bytes.
     * @returns HEX encoded Uint8Array string.
     */
    function encodeHex(byteArray, separator) {
        if (separator === void 0) { separator = ':'; }
        return Array.from(byteArray)
            .map(function (b) { return (b < 16 ? '0' : '') + b.toString(16); })
            .join(separator)
            .toUpperCase();
    }
    exports.encodeHex = encodeHex;
    /**
     * Decodes a HEX encoded Uint8Array string.
     * @param hexString HEX encoded Uint8Array string to decode.
     * @param separator Separator between encoded bytes.
     * @returns Decoded Uint8Array.
     */
    function decodeHex(hexString, separator) {
        if (separator === void 0) { separator = ':'; }
        return new Uint8Array(hexString.split(separator).map(function (b) { return parseInt(b, 16); }));
    }
    exports.decodeHex = decodeHex;
});
