"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIctEndpoint = void 0;
const oidc_squared_not_supported_error_class_1 = require("../errors/oidc-squared-not-supported-error.class");
const http_request_function_type_1 = require("./types/http-request-function.type");
function getDiscoveryUrl(opBaseUrl) {
    const opUrl = new URL(opBaseUrl);
    return `${opUrl.origin}${opUrl.pathname.endsWith('/') ? opUrl.pathname : `${opUrl.pathname}/`}.well-known/openid-configuration`;
}
async function requestDiscoveryDocument(discoveryUrl, http) {
    const result = await http('GET', discoveryUrl);
    return JSON.parse(result.body);
}
/**
 * Gets the ICT Endpoint URL.
 * @param opBaseUrl Base or issuer URL of the OpenID Provider.
 * @param http Optional HTTP Request function. Default is fetch.
 * @returns ICT Endpoint URL.
 * @throws {OidcSquaredNotSupportedError} If endpoint was not found at discovery endpoint.
 */
async function getIctEndpoint(opBaseUrl, http = http_request_function_type_1.FETCH_HTTP_REQUEST_FUNCTION) {
    const opDiscoveryUrl = getDiscoveryUrl(opBaseUrl);
    const opDiscoveryDocument = await requestDiscoveryDocument(opDiscoveryUrl, http);
    if (!opDiscoveryDocument.ict_endpoint) {
        throw new oidc_squared_not_supported_error_class_1.OidcSquaredNotSupportedError();
    }
    return opDiscoveryDocument.ict_endpoint;
}
exports.getIctEndpoint = getIctEndpoint;
//# sourceMappingURL=get-ict-endpoint.function.js.map