"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2ePoPTokenVerify = void 0;
const jose = __importStar(require("jose"));
const e2e_pop_token_invalid_class_1 = require("../../errors/e2e-pop-token-invalid.class");
const asymmetric_signing_algorithms_type_1 = require("../../types/asymmetric-signing-algorithms.type");
/**
 * Verifies an End-to-End Proof-of-Possession Token.
 * @param e2ePoPToken E2E PoP Token.
 * @param publicKey Public key from ICT to verify signature of.
 * @param options E2E PoP Token verification options.
 * @returns Header and payload of the successfully verified E2E PoP Token.
 */
async function e2ePoPTokenVerify(e2ePoPToken, publicKey, options) {
    // Validate options.
    if (!options.maxTokenAge || options.maxTokenAge <= 0) {
        options.maxTokenAge = 3600;
    }
    else if ((options.maxTokenAge ?? 0) > 3600) {
        console.warn(`Allowed maxTokenAge of an E2E PoP Token was set to "${options?.maxTokenAge}" which is longer than one hour. This is NOT RECOMMENDED!`);
    }
    options.typ = 'jwt+e2epop';
    // Ensure that algorithms are supported.
    if (options.algorithms) {
        options.algorithms = options.algorithms.filter(alg => asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(alg) >= 0);
    }
    else {
        options.algorithms = asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS;
    }
    // Set required claims.
    options.requiredClaims = [
        ...(options.requiredClaims ?? []),
        'sub',
        'iss',
        'aud',
        'jti',
        'iat',
        'exp',
    ];
    // Verify JWT properties of ICT.
    const result = await jose.jwtVerify(e2ePoPToken, publicKey, options);
    // Verify header:
    const header = result.protectedHeader;
    if (asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(header.alg ?? '') < 0) {
        throw new e2e_pop_token_invalid_class_1.E2EPoPTokenInvalid(`E2E PoP Token uses the unsupported signing algorithm "${header.alg}"`);
    }
    if (!header.jkt) {
        throw new e2e_pop_token_invalid_class_1.E2EPoPTokenInvalid('E2E PoP MUST provide a "jkt" (JWK Thumbprint) parameter in header');
    }
    else if (header.jkt !== await jose.calculateJwkThumbprint(await jose.exportJWK(publicKey))) {
        throw new e2e_pop_token_invalid_class_1.E2EPoPTokenInvalid(`The JWK Thumbprint of the provided public key does not match the expected JWK Thumbprint "${header.jkt}" from the "jkt" header of the E2E PoP Token`);
    }
    // Return result.
    return {
        protectedHeader: result.protectedHeader,
        payload: result.payload,
    };
}
exports.e2ePoPTokenVerify = e2ePoPTokenVerify;
//# sourceMappingURL=e2e-pop-token-verify.function.js.map