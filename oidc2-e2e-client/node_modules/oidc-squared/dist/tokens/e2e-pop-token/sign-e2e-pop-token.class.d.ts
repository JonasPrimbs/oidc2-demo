import * as jose from 'jose';
import { AsymmetricSigningAlgorithms } from '../../types/asymmetric-signing-algorithms.type';
import { E2EPoPTokenHeader } from './types/e2e-pop-token-header.interface';
import { E2EPoPTokenPayload } from './types/e2e-pop-token-payload.interface';
export declare class SignE2EPoPToken extends jose.SignJWT {
    /**
     * Payload of the E2E PoP.
     */
    protected _payload: Partial<E2EPoPTokenPayload>;
    /**
     * The SignE2EPoPToken class is used to build and sign End-to-End Proof-of-Possession Tokens (E2E PoPs).
     * @param payload Payload of the E2EPoP.
     */
    constructor(payload?: Partial<E2EPoPTokenPayload>);
    /**
     * Sets the protected E2E PoP header.
     * @param protectedHeader End-to-End Proof-of-Possession Token header.
     */
    setProtectedHeader(protectedHeader: E2EPoPTokenHeader): this;
    /**
     * Set "iat" (Issued At) Claim and sets the "exp" (Expiration) Claim to the recommended 300 seconds later, if not yet set.
     * @param input "iat" (Issued At) Claim value to set on the JWT Claim Set or undefined to use now.
     */
    setIssuedAt(input?: number | undefined): this;
    /**
     * Set "jti" (JWT ID) Claim.
     * @param jwtId "jti" (JWT ID) Claim value to set on the JWT Claim Set or undefined to use a UUID.
     */
    setJti(jwtId?: string): this;
    /**
     * Sets the JWK Thumbprint of the key that the E2E PoP Token will be signed with.
     * @param alg JWA signing algorithm.
     * @param jkt JWK Thumbprint of the Client's public key.
     */
    setThumbprint(alg: AsymmetricSigningAlgorithms, jkt: string): this;
}
//# sourceMappingURL=sign-e2e-pop-token.class.d.ts.map