"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ictVerify = void 0;
const jose = __importStar(require("jose"));
const ict_invalid_class_1 = require("../../errors/ict-invalid.class");
const asymmetric_signing_algorithms_type_1 = require("../../types/asymmetric-signing-algorithms.type");
/**
 * Verifies an Identity Certification Token.
 * @param ict Identity Certification Token.
 * @param publicKey Public key of OpenID Provider to verify the signature with.
 * @param options ICT verification options.
 * @returns Header and payload of successfully verified ICT.
 */
async function ictVerify(ict, publicKey, options = {}) {
    // Validate options.
    if (!options.maxTokenAge || options.maxTokenAge <= 0) {
        options.maxTokenAge = 3600;
    }
    else if ((options.maxTokenAge ?? 0) > 3600) {
        console.warn(`Allowed maxTokenAge of an ICT was set to "${options?.maxTokenAge}" which is longer than one hour. This is NOT RECOMMENDED!`);
    }
    if (!options.requiredContext) {
        console.warn('No end-to-end authentication context provided. This is NOT RECOMMENDED!');
    }
    options.typ = 'jwt+ict';
    // Ensure that algorithms are supported.
    if (options.algorithms) {
        options.algorithms = options.algorithms.filter(alg => asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(alg) >= 0);
    }
    else {
        options.algorithms = asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS;
    }
    // Set required claims.
    options.requiredClaims = [
        ...(options.requiredClaims ?? []),
        'sub',
        'iss',
        'jti',
        'iat',
        'exp',
        'cnf',
        'ctx',
    ];
    // Verify JWT properties of ICT.
    const result = await jose.jwtVerify(ict, publicKey, options);
    // Verify header:
    const header = result.protectedHeader;
    if (asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(header.alg ?? '') < 0) {
        throw new ict_invalid_class_1.ICTInvalid(`ICT uses the unsupported signing algorithm "${header.alg}"`);
    }
    if (!header.kid) {
        throw new ict_invalid_class_1.ICTInvalid('ICT MUST provide a "kid" (Key ID) parameter in header');
    }
    // Verify payload:
    const payload = result.payload;
    // Verify that cnf claim contains the jwk parameter.
    if (!payload.cnf.jwk) {
        throw new ict_invalid_class_1.ICTInvalid('ICTs MUST contain a "jwk" (JSON Web Key) parameter in their "cnf" (Confirmation) claim');
    }
    // Verify ICT contexts:
    const requiredContexts = (typeof options.requiredContext === 'string') ? [options.requiredContext] : options.requiredContext ?? [];
    const providedContexts = (typeof payload.ctx === 'string') ? [payload.ctx] : payload.ctx ?? [];
    if (!requiredContexts.every((context) => providedContexts.indexOf(context) >= 0)) {
        throw new ict_invalid_class_1.ICTInvalid(`ICT does not contain all required end-to-end authentication contexts! Required: ${JSON.stringify(requiredContexts)}. Contained: ${JSON.stringify(providedContexts)}`);
    }
    // Return result.
    return {
        protectedHeader: header,
        payload: payload,
    };
}
exports.ictVerify = ictVerify;
//# sourceMappingURL=ict-verify.function.js.map