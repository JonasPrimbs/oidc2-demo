import * as jose from 'jose';
import { ICTHeader } from './types/ict-header.interface';
import { ICTPayload } from './types/ict-payload.interface';
import { AsymmetricSigningAlgorithms } from '../..';
export declare class SignICT extends jose.SignJWT {
    /**
     * Payload of the ICT.
     */
    protected _payload: Partial<ICTPayload>;
    /**
     * The SignICT class is used to build and sign Identity Certification Tokens (ICTs).
     * @param payload Payload of the ICT.
     */
    constructor(payload?: Partial<ICTPayload>);
    /**
     * Set "cnf" (Confirmation) Claim.
     * @param publicKey The public "jwk" (JSON Web Key) parameter being present in the "cnf" (Confirmation) Claim.
     */
    setConfirmation(publicKey: jose.JWK): this;
    /**
     * Set "ctx" (End-to-End Authentication Context(s)) Claim.
     * @param context "ctx" (End-to-End Authentication Context(s)) Claim value set on the ICT payload.
     */
    setContext(context: string | string[]): this;
    /**
     * Sets the protected ICT header.
     * @param protectedHeader Proof of Possession Token header.
     */
    setProtectedHeader(protectedHeader: ICTHeader): this;
    /**
     * Set "iat" (Issued At) Claim and sets the "exp" (Expiration) Claim to the recommended 60 seconds later, if not yet set.
     * @param input "iat" (Issued At) Claim value to set on the JWT Claim Set or undefined to use now.
     */
    setIssuedAt(input?: number | undefined): this;
    /**
     * Set "jti" (JWT ID) Claim.
     * @param jwtId "jti" (JWT ID) Claim value to set on the JWT Claim Set or undefined to use a UUID.
     */
    setJti(jwtId?: string): this;
    /**
     * Sets the Key ID of the key that the ICT will be signed with.
     * @param alg JWA signing algorithm.
     * @param kid Key ID.
     */
    setKeyId(alg: AsymmetricSigningAlgorithms, kid: string): this;
}
//# sourceMappingURL=sign-ict.class.d.ts.map