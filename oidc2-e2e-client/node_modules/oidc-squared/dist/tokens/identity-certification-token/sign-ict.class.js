"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignICT = void 0;
const jose = __importStar(require("jose"));
const nonce_generators_class_1 = require("../../nonce-generators/nonce-generators.class");
class SignICT extends jose.SignJWT {
    /**
     * Payload of the ICT.
     */
    _payload = {};
    /**
     * The SignICT class is used to build and sign Identity Certification Tokens (ICTs).
     * @param payload Payload of the ICT.
     */
    constructor(payload) {
        super(payload ?? {});
        this.setJti();
        this.setIssuedAt();
    }
    /**
     * Set "cnf" (Confirmation) Claim.
     * @param publicKey The public "jwk" (JSON Web Key) parameter being present in the "cnf" (Confirmation) Claim.
     */
    setConfirmation(publicKey) {
        this._payload.cnf = {
            jwk: publicKey,
        };
        return this;
    }
    /**
     * Set "ctx" (End-to-End Authentication Context(s)) Claim.
     * @param context "ctx" (End-to-End Authentication Context(s)) Claim value set on the ICT payload.
     */
    setContext(context) {
        this._payload.ctx = context;
        return this;
    }
    /**
     * Sets the protected ICT header.
     * @param protectedHeader Proof of Possession Token header.
     */
    setProtectedHeader(protectedHeader) {
        return super.setProtectedHeader(protectedHeader);
    }
    /**
     * Set "iat" (Issued At) Claim and sets the "exp" (Expiration) Claim to the recommended 60 seconds later, if not yet set.
     * @param input "iat" (Issued At) Claim value to set on the JWT Claim Set or undefined to use now.
     */
    setIssuedAt(input) {
        const iatResult = super.setIssuedAt(input);
        if (iatResult._payload.exp) {
            return iatResult;
        }
        else {
            return super.setExpirationTime(iatResult._payload.iat + 300);
        }
    }
    /**
     * Set "jti" (JWT ID) Claim.
     * @param jwtId "jti" (JWT ID) Claim value to set on the JWT Claim Set or undefined to use a UUID.
     */
    setJti(jwtId) {
        return super.setJti(jwtId ?? nonce_generators_class_1.NonceGenerators.uuid().generate());
    }
    /**
     * Sets the Key ID of the key that the ICT will be signed with.
     * @param alg JWA signing algorithm.
     * @param kid Key ID.
     */
    setKeyId(alg, kid) {
        return this.setProtectedHeader({
            typ: 'jwt+ict',
            alg: alg,
            kid: kid,
        });
    }
}
exports.SignICT = SignICT;
//# sourceMappingURL=sign-ict.class.js.map