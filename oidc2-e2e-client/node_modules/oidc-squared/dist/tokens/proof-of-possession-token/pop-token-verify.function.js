"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.popTokenVerify = void 0;
const jose = __importStar(require("jose"));
const asymmetric_signing_algorithms_type_1 = require("../../types/asymmetric-signing-algorithms.type");
const pop_token_invalid_class_1 = require("../../errors/pop-token-invalid.class");
async function popTokenVerify(popToken, options) {
    // Validate options.
    if (!options.maxTokenAge || options.maxTokenAge <= 0) {
        options.maxTokenAge = 300;
    }
    else if ((options.maxTokenAge ?? 0) > 300) {
        console.warn(`Allowed maxTokenAge of a PoP Token was set to "${options?.maxTokenAge}" which is longer than 5 minutes. This is NOT RECOMMENDED!`);
    }
    options.typ = 'jwt+pop';
    // Ensure that algorithms are supported.
    if (options.algorithms) {
        options.algorithms = options.algorithms.filter(alg => asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(alg) >= 0);
    }
    else {
        options.algorithms = asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS;
    }
    // Set required claims.
    options.requiredClaims = [
        ...(options.requiredClaims ?? []),
        'sub',
        'iss',
        'aud',
        'jti',
        'iat',
        'exp',
    ];
    // Verify JWT Properties of PoP Token.
    const result = await jose.jwtVerify(popToken, jose.EmbeddedJWK, options);
    // Verify header:
    const header = result.protectedHeader;
    if (asymmetric_signing_algorithms_type_1.AVAILABLE_ASYMMETRIC_SIGNING_ALGORITHMS.indexOf(header.alg ?? '') < 0) {
        throw new pop_token_invalid_class_1.PoPTokenInvalid(`PoP Token uses the unsupported signing algorithm "${header.alg}"`);
    }
    if (!header.jwk) {
        throw new pop_token_invalid_class_1.PoPTokenInvalid('PoP Token MUST provide a "jwk" (JSON Web Key) parameter in header containing the public key of the issuer');
    }
    // Verify payload:
    const payload = result.payload;
    // Return result.
    return {
        protectedHeader: header,
        payload: payload,
    };
}
exports.popTokenVerify = popTokenVerify;
//# sourceMappingURL=pop-token-verify.function.js.map