import * as jose from 'jose';
import { PoPTokenHeader } from './types/pop-token-header.interface';
import { PoPTokenPayload } from './types/pop-token-payload.interface';
import { AsymmetricSigningAlgorithms } from '../..';
export declare class SignPoPToken extends jose.SignJWT {
    /**
     * Payload of the PoP Token.
     */
    protected _payload: Partial<PoPTokenPayload>;
    /**
     * The SignPoPToken class is used to build and sign Proof-of-Possession Tokens.
     * @param payload Payload of the PoP Token.
     */
    constructor(payload?: Partial<PoPTokenPayload>);
    /**
     * Set "aud" (Audience) Claim.
     * @param audience "aud" (Audience) Claim value to set on the JWT Claims Set.
     */
    setAudience(audience: string): this;
    /**
     * Sets the protected PoP Token header.
     * @param protectedHeader Proof of Possession Token header.
     */
    setProtectedHeader(protectedHeader: PoPTokenHeader): this;
    /**
     * Set "iat" (Issued At) Claim and sets the "exp" (Expiration) Claim to the recommended 60 seconds later, if not yet set.
     * @param input "iat" (Issued At) Claim value to set on the JWT Claim Set or undefined to use now.
     */
    setIssuedAt(input?: number | undefined): this;
    /**
     * Set "jti" (JWT ID) Claim.
     * @param jwtId "jti" (JWT ID) Claim value to set on the JWT Claim Set or undefined to use a UUID.
     */
    setJti(jwtId?: string): this;
    /**
     * Sets the public key of the PoP Token.
     * @param alg JWA signing algorithm.
     * @param jwk Public JSON Web Key.
     */
    setPublicKey(alg: AsymmetricSigningAlgorithms, jwk: Pick<jose.JWK, 'kty' | 'crv' | 'x' | 'y' | 'e' | 'n'>): this;
    /**
     * Sets the required identity claims.
     * @param requiredClaims Array of required identity claims.
     */
    setRequiredClaims(requiredClaims: string[]): this;
    /**
     * Sets the requested optional identity claims.
     * @param optionalClaims Array of requestd optional identity claims.
     */
    setOptionalCLaims(optionalClaims: string[]): this;
    /**
     * Sets whether the "aud" (Audience) claim should be present in the requested ICT.
     * @param withAudience Whether the audience should be present.
     */
    setWithAudience(withAudience?: boolean): this;
}
//# sourceMappingURL=sign-pop-token.class.d.ts.map