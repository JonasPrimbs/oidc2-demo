"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignPoPToken = void 0;
const jose = __importStar(require("jose"));
const __1 = require("../..");
class SignPoPToken extends jose.SignJWT {
    /**
     * Payload of the PoP Token.
     */
    _payload = {};
    /**
     * The SignPoPToken class is used to build and sign Proof-of-Possession Tokens.
     * @param payload Payload of the PoP Token.
     */
    constructor(payload) {
        super(payload ?? {});
        this.setJti();
        this.setIssuedAt();
    }
    /**
     * Set "aud" (Audience) Claim.
     * @param audience "aud" (Audience) Claim value to set on the JWT Claims Set.
     */
    setAudience(audience) {
        return super.setAudience(audience);
    }
    /**
     * Sets the protected PoP Token header.
     * @param protectedHeader Proof of Possession Token header.
     */
    setProtectedHeader(protectedHeader) {
        return super.setProtectedHeader(protectedHeader);
    }
    /**
     * Set "iat" (Issued At) Claim and sets the "exp" (Expiration) Claim to the recommended 60 seconds later, if not yet set.
     * @param input "iat" (Issued At) Claim value to set on the JWT Claim Set or undefined to use now.
     */
    setIssuedAt(input) {
        const iatResult = super.setIssuedAt(input);
        if (iatResult._payload.exp) {
            return iatResult;
        }
        else {
            return super.setExpirationTime(iatResult._payload.iat + 60);
        }
    }
    /**
     * Set "jti" (JWT ID) Claim.
     * @param jwtId "jti" (JWT ID) Claim value to set on the JWT Claim Set or undefined to use a UUID.
     */
    setJti(jwtId) {
        return super.setJti(jwtId ?? __1.NonceGenerators.uuid().generate());
    }
    /**
     * Sets the public key of the PoP Token.
     * @param alg JWA signing algorithm.
     * @param jwk Public JSON Web Key.
     */
    setPublicKey(alg, jwk) {
        return this.setProtectedHeader({
            typ: 'jwt+pop',
            alg: alg,
            jwk: jwk,
        });
    }
    /**
     * Sets the required identity claims.
     * @param requiredClaims Array of required identity claims.
     */
    setRequiredClaims(requiredClaims) {
        this._payload.requiredClaims = requiredClaims;
        return this;
    }
    /**
     * Sets the requested optional identity claims.
     * @param optionalClaims Array of requestd optional identity claims.
     */
    setOptionalCLaims(optionalClaims) {
        this._payload.optionalClaims = optionalClaims;
        return this;
    }
    /**
     * Sets whether the "aud" (Audience) claim should be present in the requested ICT.
     * @param withAudience Whether the audience should be present.
     */
    setWithAudience(withAudience) {
        this._payload.withAudience = withAudience;
        return this;
    }
}
exports.SignPoPToken = SignPoPToken;
//# sourceMappingURL=sign-pop-token.class.js.map