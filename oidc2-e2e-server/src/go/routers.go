/*
 * Endpoint for establishing and maintaining an encrypted client-server session
 *
 * This endpoint establishes an end-to-end encrypted client-server session after authenticating the client with its Id Certification Token (Client_ICT). After the successful exchange of DH parameters, the client can communicate with the server, upload, download or delete files on the server with all communication being encrypted on application layer.
 *
 * API version: 0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"DataDelete",
		strings.ToUpper("Delete"),
		"/data",
		DataDelete,
	},

	Route{
		"DataGet",
		strings.ToUpper("Get"),
		"/data",
		DataGet,
	},

	Route{
		"PostFile",
		strings.ToUpper("Post"),
		"/data",
		PostFile,
	},

	Route{
		"DataOptions",
		strings.ToUpper("Options"),
		"/data",
		DataOptions,
	},

	Route{
		"Ping",
		strings.ToUpper("Get"),
		"/ping",
		Ping,
	},

	Route{
		"Ping",
		strings.ToUpper("Options"),
		"/ping",
		PingOptions,
	},

	Route{
		"GenSession",
		strings.ToUpper("Post"),
		"/sid",
		GenSession,
	},

	Route{
		"GetPkiKey",
		strings.ToUpper("Get"),
		"/.well-known/pki-configuration",
		GetPkiKey,
	},
}
