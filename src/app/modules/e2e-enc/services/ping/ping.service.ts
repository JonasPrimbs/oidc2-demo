/**
 * Endpoint for establishing and maintaining an encrypted client-server session
 * This endpoint establishes an end-to-end encrypted client-server session after authenticating the client with its Id Certification Token (Client_ICT). After the successful exchange of DH parameters, the client can communicate with the server, upload, download or delete files on the server with all communication being encrypted on application layer.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';
import { firstValueFrom } from 'rxjs';


@Injectable({
    providedIn: 'root'
  })
  export class PingService {

    protected basePath = 'http://localhost:4040';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Refresh session token
     * GET request to /ping endpoint to fetch a new session token from server
     * @param sessionToken current session token that needs to be replaced before it expires
     * @param publicDHMac new public DH parameter for MAC
     * @param publicDHEnc new public DH parameter for encryption
     * @param signature HTTP message MAC
     */
    public async ping(sessionToken: string,
                publicDHMac: string,
                publicDHEnc: string,
                signature: string): Promise<any> {

        let headers = this.defaultHeaders;
        headers = headers.set('x-e2e-session', sessionToken);
        headers = headers.set('Content-Type', "text/plain; charset=utf-8");
        headers = headers.set('x-publicKeyMac', publicDHMac);
        headers = headers.set('x-publicKeyEnc', publicDHEnc);
        headers = headers.set('Signature', signature);
        /*return this.httpClient.get(this.basePath+'/ping',
            {
                headers: headers,
                observe: 'response',
                responseType: 'text'
            }
        );*/
        return await firstValueFrom(
            this.httpClient.get(this.basePath+'/ping',
                {
                    headers: headers,
                    observe: 'response',
                    responseType: 'text'
                }),
        );
    }
}
